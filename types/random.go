package types

import (
	"encoding/hex"
	ed25519VRF "github.com/tendermint/tendermint/vrf/ed25519"
	"github.com/tendermint/tendermint/vrf/ed25519/vrf"
)

// VrfRandom Random generated by VRF
type VrfRandom struct {
	Seed []byte  `json:"seed"`
	Proof []byte `json:"proof"`
}

// GenerateRandom Generate random using ed25519
// TODO: support more signature algorithms
func GenerateRandom(secKey []byte, input ...[]byte) (VrfRandom, error) {
	data := ed25519VRF.Sha3256(input...)
	seed, proof, err := ed25519VRF.GenerateVrf(secKey, data, false)
	if err != nil {
		return VrfRandom{}, err
	}
	if proof == nil {
		return VrfRandom{}, vrf.ErrEvaluateFailed
	}
	/*signer := vrf.NewSignerFromRaw(seckey)
	if signer == nil {
		return VrfRandom{}, fmt.Errorf("cannot using privatekey: %s", seckey)
	}

	seed, proof := signer.Prove(data, false)
	if proof == nil {
		return VrfRandom{}, vrf.ErrEvaluateFailed
	}*/
	return VrfRandom{seed[:], proof}, nil
}


var (
	GENESIS_SEED, _ = FromHex("9dknm4nfghjfrumkoio22n11211nnfnfgk")
	GENESIS_PROOF, _ = FromHex("")
)


// FromHex decodes string from Hex.
func FromHex(data string) ([]byte, error) {
	return hex.DecodeString(data)
}
