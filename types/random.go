package types

import (
	"encoding/hex"
	"fmt"
	"github.com/tendermint/tendermint/vrf/ed25519/vrf"
	"golang.org/x/crypto/sha3"
)

// VrfRandom Random generated by VRF
type VrfRandom struct {
	Seed []byte  `json:"seed"`
	Proof []byte `json:"proof"`
}

// GenerateRandom Generate random using ed25519
// TODO: support more signature algorithms
func GenerateRandom(seckey []byte, input ...[]byte) (VrfRandom, error) {
	signer := vrf.NewSignerFromRaw(seckey)
	if signer == nil {
		return VrfRandom{}, fmt.Errorf("cannot using privatekey: %s", seckey)
	}

	data := Sha3256(input...)

	seed, proof := signer.Prove(data, false)
	if proof == nil {
		return VrfRandom{}, vrf.ErrEvaluateFailed
	}
	return VrfRandom{seed[:], proof}, nil
}


var (
	GENESIS_SEED, _ = FromHex("")
	GENESIS_PROOF, _ = FromHex("")
)

// Sha3256 returns the SHA3-256 digest of the data.
func Sha3256(args ...[]byte) []byte {
	hasher := sha3.New256()
	for _, bytes := range args {
		hasher.Write(bytes)
	}
	return hasher.Sum(nil)
}

// FromHex decodes string from Hex.
func FromHex(data string) ([]byte, error) {
	return hex.DecodeString(data)
}
