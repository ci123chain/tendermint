// Code generated by mockery v1.0.0. DO NOT EDIT.

package statesync

import (
	time "time"

	mock "github.com/stretchr/testify/mock"

	types "github.com/tendermint/tendermint/types"
)

// mockLightClient is an autogenerated mock type for the lightClient type
type mockLightClient struct {
	mock.Mock
}

// TrustedValidatorSet provides a mock function with given fields: _a0
func (_m *mockLightClient) TrustedValidatorSet(_a0 int64) (*types.ValidatorSet, int64, error) {
	ret := _m.Called(_a0)

	var r0 *types.ValidatorSet
	if rf, ok := ret.Get(0).(func(int64) *types.ValidatorSet); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.ValidatorSet)
		}
	}

	var r1 int64
	if rf, ok := ret.Get(1).(func(int64) int64); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Get(1).(int64)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(int64) error); ok {
		r2 = rf(_a0)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// VerifyHeaderAtHeight provides a mock function with given fields: _a0, _a1
func (_m *mockLightClient) VerifyHeaderAtHeight(_a0 int64, _a1 time.Time) (*types.SignedHeader, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *types.SignedHeader
	if rf, ok := ret.Get(0).(func(int64, time.Time) *types.SignedHeader); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.SignedHeader)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int64, time.Time) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
